services:
  # Core Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
    - uav-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
    - zookeeper
    ports:
    - 9092:9092
    - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 6
    networks:
    - uav-net
  # Core Services
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
    - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
    - kafka
    networks:
    - uav-net
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
    - 9000:9000
    - 9001:9001
    volumes:
    - minio-data:/data
    networks:
    - uav-net
  minio-init:
    image: minio/mc
    depends_on:
    - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      do
        echo 'Waiting for MinIO to be ready...'
        sleep 1
      done;
      /usr/bin/mc mb myminio/uav-images --ignore-existing;
      /usr/bin/mc anonymous set download myminio/uav-images;
      /usr/bin/mc policy set public myminio/uav-images;
      exit 0;
      "
    networks:
    - uav-net

  # Backend
  # backend:
  #   build: ./backend
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - kafka
  #     - minio
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     MINIO_ENDPOINT: minio:9000
  #     MINIO_ACCESS_KEY: minioadmin
  #     MINIO_SECRET_KEY: minioadmin
  #   networks:
  #     - uav-net
  # frontend
  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "3000:3000"

  #   networks:
  #     - uav-net

  # UAV Producers
  uav-producer-1:
    build: ./uav-producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      UAV_ID: '01'
    depends_on:
    - kafka
    - minio
    volumes:
    - ./data:/data
    deploy:
      replicas: 1

    networks:
    - uav-net

  uav-producer-2:
    build: ./uav-producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      UAV_ID: '02'
    depends_on:
    - kafka
    - minio
    volumes:
    - ./data:/data
    deploy:
      replicas: 1

    networks:
    - uav-net

  uav-producer-3:
    build: ./uav-producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      UAV_ID: '03'
    depends_on:
    - kafka
    - minio
    volumes:
    - ./data:/data
    deploy:
      replicas: 1

    networks:
    - uav-net

volumes:
  minio-data:
  kafka-data:

networks:
  uav-net:
    driver: bridge
